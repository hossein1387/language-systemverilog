".source.sv":
    "`ifdef_`else":
        prefix: "`ifdef"
        body: """
            `ifdef ${1:<definition>}
                ${0}
            `else
            `endif
        """
    "`ifndef_`define":
        prefix: "`ifn_def"
        body: """
            `ifndef ${1:<definition>}
            `define ${1:<definition>}

            ${0}

            `endif // ${1:<definition>}
        """
    "`ifndef_`else":
        prefix: "`ifndef"
        body: """
            `ifndef ${1:<definition>}
            	${0}
            `else
            `endif
        """
    "always":
        prefix: "always"
        body: """
            always @(posedge clk or negedge rst_n) begin
            	if (rst_n == 1'b0) begin
            		${1:<reg_name>} <= ${2:<value1>};
            	end else begin
            		${1:<reg_name>} <= ${3:<value2>};
            	end
            end
            ${0}
        """
    "always_comb":
        prefix: "alwaysc"
        body: """always_comb ${0:<combinational_logic>};"""
    "always_ff":
        prefix: "alwaysf"
        body: """
            always_ff @(${1:<sensitivity_list>}) begin
            	${0}
            end
        """
    "always_latch":
        prefix: "alwaysl"
        body: """always_latch ${0:<latched_logic>};"""
    "always_sync":
        prefix: "alwayss"
        body: """
            always @(posedge clk) begin
            	if (rst == 1'b0) begin
            		${1:<reg_name>} <= ${2:<value1>};
            	end else begin
            		${1:<reg_name>} <= ${3:<value2>};
            	end
            end
            ${0}
        """
    "begin_end":
        prefix: "begin"
        body: """
            begin
            	${0}
            end
        """
    "case":
        prefix: "case"
        body: """
            case (${1:exp})
            	${2:match}	: ${3};
            	default	: ${4};
            endcase
        """
    "class":
        prefix: "class"
        body: """
            class ${1:<class_name>};
            	${0}
            endclass : ${1:<class_name>}
        """
    "class_extends":
        prefix: "classe"
        body: """
            class ${1:<derived_class>} extends ${2:<parent_class>};
            	${0}
            endclass : ${1:<derived_class>}
        """
    "class_parameterized":
        prefix: "classp"
        body: """
            class ${1:<class_name>}#(${2:<class_parameters>});
            	${0}
            endclass : ${1:<class_name>}
        """
    "constraint":
        prefix: "constraint"
        body: """constraint ${1:name} {${0}}"""
    "do_while":
        prefix: "do"
        body: """
            do begin
            	${0}
            end while (${1:<condition>});
        """
    "else":
        prefix: "else"
        body: """
            else begin
            	${1}
            end
        """
    "else_if":
        prefix: "elseif"
        body: """
            else if (${1}) begin
            	${2:}
            end
        """
    "module":
        prefix: "module"
        body: """
            module ${1:<name>};
            ${0}
            endmodule
        """
    "for_qt":
        prefix: "forqt"
        body: """
            for (int ${1:<i>} = ${2:<start>}; ${1:<i>} > ${3:<end>}; ${1:<i>} --) begin
            	${0}
            end
        """
    "for_qteq":
        prefix: "forqteq"
        body: """
            for (int ${1:<i>} = ${2:<start>}; ${1:<i>} >= ${3:<end>}; ${1:<i>} --) begin
            	${0}
            end
        """
    "for_lt":
        prefix: "for"
        body: """
            for (int ${1:<i>} = ${2:<start>}; ${1:<i>} < ${3:<end>}; ${1:<i>} ++) begin
            	${0}
            end
        """
    "for_lteq":
        prefix: "forlteq"
        body: """
            for (int ${1:<i>} = ${2:<start>}; ${1:<i>} <= ${3:<end>}; ${1:<i>} ++) begin
            	${0}
            end
        """
    "repeat":
        prefix: "repeat"
        body: """
            repeat (${1:times}) begin
                ${0}
            end
        """
    "while":
        prefix: "while"
        body: """
            while (${1:<condition>}) begin
                ${0}
            end
        """
    "foreach":
        prefix: "foreach"
        body: """
            foreach (${1:<index>}) begin
            	${0}
            end
        """
    "forever":
        prefix: "forever"
        body: """
            forever begin
            	${0}
            end
        """
    "fork":
        prefix: "fork"
        body: """
            fork
            	begin
            		${0}
            	end
            	begin
            	end
            join${1:<_none/_any>}
        """
    "if":
        prefix: "if"
        body: """
            if (${1}) begin
            	${0}
            end
        """
    "if_else":
        prefix: "ifelse"
        body: """
            if (${1}) begin
            	${2}
            end else begin
            	${3}
            end
        """
    "initial":
        prefix: "initial"
        body: """
            initial begin
            	${0}
            end
        """
    "interface":
        prefix: "interface"
        body: """
            interface ${1:<name>};
            	${0}
            endinterface : ${1:<name>}
        """
    "interface_parameterized":
        prefix: "interfacep"
        body: """
            interface ${1:<interface_name>}#(${2:<interface_parameters>});
            	${0}
            endinterface : ${1:<interface_name>}
        """
    "package":
        prefix: "package"
        body: """
            package ${1:<name>};
            	${0}
            endpackage : ${1:<name>}
        """
    "function":
        prefix: "function"
        body: """
            function ${2:return_type} ${3:function_name}(${4:arguments});
                ${0}
            endfunction : ${3:function_name}
        """
    "task":
        prefix: "task"
        body: """
            task ${2:<task_name>}(${3:<arguments>});
            	${0}
            endtask : ${2:<task_name>}
        """
    "typedef enum":
        prefix: "enum"
        body: """typedef enum ${1:enum_type} {${2:<enum_element1>}} ${3:<enum_type>};"""
    "typedef struct":
        prefix: "struct"
        body: """
            typedef struct {
            	${1:<struct_member>}
            } ${2:<struct_type>};
        """
    "typedef union":
        prefix: "union"
        body: """
            typedef union {
            	${1:<union_member>}
            } ${2:union_type};
        """
